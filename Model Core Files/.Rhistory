"Metastatic"=risk_data[34]/0.822,
"DCIS"=utility_DCIS)
#Cost data
cost_strat<-risk_data[31]
cost_DCIS<-cost_DCIS_base*(1+risk_data[32])
cost_screen<-cost_screen_base*(1+risk_data[35])
cost_follow_up <- cost_follow_up_base*(1+risk_data[36])
cost_biop <- cost_biop_base*(1+risk_data[37])
cost_US <- cost_US_base*(1+risk_data[38])
cost_MRI <-cost_MRI_base*(1+risk_data[39])
###############Screen times###############################
screen_times <- c(999)
if (screen_strategy==1 & risk_data[10]==1) {
if (risk_data[4]<4) {screen_times<-low_risk_screentimes} else
if (risk_data[4]>3 & risk_data[4]<5) {screen_times<-med_risk_screentimes} else
if (risk_data[4]>4) {screen_times<-high_risk_screentimes}
} else if(screen_strategy==1 & risk_data[10]==0) {screen_times<-low_risk_screentimes}
if(screen_strategy==2 & risk_data[10]==1){
if(risk_data[4]==1){screen_times<-low_risk_screentimes} else
if(risk_data[4]==2){screen_times<-med_risk_screentimes} else
if(risk_data[4]==3){screen_times<-high_risk_screentimes}
} else if(screen_strategy==1 & risk_data[10]==0) {screen_times<-low_risk_screentimes}
if(screen_strategy==3){
screen_times <- low_risk_screentimes
}
if(screen_strategy==4){
screen_times <- med_risk_screentimes
}
if(screen_strategy==5){
screen_times <- seq(screen_startage, screen_startage+(5*4),5)
}
if(screen_strategy==6){
screen_times <- seq(screen_startage, screen_startage+10,10)
}
if(screen_strategy==7 & risk_data[10]==1){
if(risk_data[4]==1){screen_times<-seq(screen_startage, screen_startage+(5*4),5)}
if(risk_data[4]==2){screen_times<-low_risk_screentimes}
} else if(screen_strategy==7 & risk_data[10]==0) {screen_times<-low_risk_screentimes}
if(screen_strategy==8 & risk_data[10]==1){
if(risk_data[4]==1){screen_times<-seq(screen_startage,screen_startage+(6*3),6)}
if(risk_data[4]==2){screen_times<-low_risk_screentimes}
} else if (screen_strategy==8 & risk_data[10]==0) {screen_times<-low_risk_screentimes}
if(screen_strategy==9 & risk_data[10]==1){
if (risk_data[4]==1) {screen_times<-seq(screen_startage, screen_startage+(5*4),5)} else
if (risk_data[4]==2 | risk_data[4]==3) {screen_times<-low_risk_screentimes} else
if (risk_data[4]==4) {screen_times<-med_risk_screentimes} else
if (risk_data[4]==5) {screen_times<-high_risk_screentimes}
} else if(screen_strategy==9 & risk_data[10]==0) {screen_times<-low_risk_screentimes}
##########Counters i loop level######################
#screen-detected cancer counts
screen_detected_count <- 0
sdfirst_counter <- 0
sdlast_counter <-0
#count of screens
screen_counter <- 0
lastscreen_counter <-0
US_counter <- 0
MRI_counter <- 0
#recall count
recall_counter <- 0
#total cost
cost_counter <- 0
#total life years
LY_counter <- 0
#total QALYs
QALY_counter <- 0
#Cancer stage counters
stage1_counter <- 0
stage2_counter <- 0
stage3_counter <- 0
stage4_counter <- 0
DCIS_counter <- 0
#######J loop for individual experience of breast cancer screening)
for (j in jnum){
#Set J level counters
screen_count <- 0
missed_screen<- 0
recall_count <- 0
sdlast_cancer <-0
lastscreen_count <- 0
sdfirst_cancer <- 0
stage_cat <- 0
MRI_count <- 0
US_count <- 0
incidence_age_record <- 0
costs <- 0
US_costs <- 0
MRI_costs <- 0
costs_follow_up <- 0
#Lifetime cancer incidence
#Determines if a cancer occurs and at what age
if (risk_data[12]==1){
ca_case<-1
#Determine cancer growth rate
grow_rate_i<-risk_data[14]
#Incidence age (under current programme)
ca_incidence_i <- cmp_incidence_function()
ca_incidence_age <- ca_incidence_i[1]
#Clinical detection age
CD_size <- ca_incidence_i[4]#tumour diameter at CD
#The detection age is either the age at clinical detection
#or a formula is applied to determine the age at screen
#detection
if(ca_incidence_i[2] ==1){CD_age <- ca_incidence_i[1]} else
CD_age <- ca_incidence_i[1] + ((log((Vm/Vc)^0.25-1)-log((Vm/((4/3)*pi*(ca_incidence_i[4]/2)^3))^0.25-1))/(0.25*grow_rate_i)) -
((log((Vm/Vc)^0.25-1)-log((Vm/((4/3)*pi*(ca_incidence_i[3]/2)^3))^0.25-1))/(0.25*grow_rate_i))
cancer_diagnostic[8] <- c(CD_age)
#Calculate tumour genesis age
t_gen <- ((log((Vm/Vc)^0.25-1)-log((Vm/((4/3)*pi*(CD_size/2)^3))^0.25-1))/(0.25*grow_rate_i)) #Calculate time to get to clinical detection size
gen_age <- CD_age - t_gen
} else {
ca_case <- 0
ca_incidence_age <- 999 #redundent but ensures after end of simulation if called
CD_age <- 999 #redundent but ensures after end of simulation if called
}
#All cause moratlity
#Get a mortality age and make sure this is greater than start age and cancer incidence age
Mort_age <- risk_data[11]
#Ca incidence ('original' incidence time) trumps mortality
#because it is probability conditional on survival
if(ca_case == 1 & Mort_age <= ca_incidence_age){Mort_age <-qweibull(p = dqrunif(n = 1,min = pweibull(q = CD_age,shape = acmmortality_wb_a,scale = acmmortality_wb_b), max = 1),shape = acmmortality_wb_a, scale = acmmortality_wb_b)}
if(Mort_age >= time_horizon){Mort_age <- 99.99}
cancer_diagnostic[7] <- c(Mort_age)
#Other individual variables
age <- start_age
interval_ca <- 0
screen_detected_ca <- 0
#####################DES COMPONENT #######################
Time_to_screen <- screen_times[1] - age #select the current next screen age and subtract age
Time_to_death <- Mort_age - age #time to death from current age
Time_to_CD <- CD_age - age  #Time to clinical detection
#triple While loop condition check if abosrbing death,
#screen_detected or interval ca event has occured
#update age at the end of each iteration
while ((age < Mort_age) && (interval_ca == 0) && (screen_detected_ca == 0)){
#events pre-diagnosis
Event_list <- c(Time_to_screen,Time_to_death,Time_to_CD)
Event_place <- which.min(Event_list) # pick the nearest event in time
Next_event_time <- Event_list[Event_place] # the time to nearest event
current_discount<-(1/((1+discount_cost)^(Next_event_time+age-screen_startage)))
#Open screening event
if(Event_place == 1){
if (screen_count==0 & missed_screen==0 & dqrunif(1,0,1)>uptakefirstscreen |
screen_count==0 & missed_screen>0 & dqrunif(1,0,1)>uptakenoscreen|
screen_count>0 & dqrunif(1,0,1)>uptakeotherscreen) {missed_screen<-missed_screen+1}else{
screen_count<-screen_count+1
costs<-costs+(cost_screen*current_discount)
if(screen_count==1 & screen_strategy<3 & risk_data[8]==1){costs<-costs+(cost_strat*current_discount)}
if(screen_count==1 & screen_strategy==7 & risk_data[8]==1){costs<-costs+(cost_strat*current_discount)}
if(screen_count==1 & screen_strategy==8 & risk_data[8]==1){costs<-costs+(cost_strat*current_discount)}
if(screen_count==1 & screen_strategy==9 & risk_data[8]==1){costs<-costs+(cost_strat*current_discount)}
if(screen_count == length(screen_times)){lastscreen_count <- 1}
if(risk_data[7] == 1){US_count <- US_count + 1
costs <- costs + (cost_US*current_discount)
US_costs<-US_costs+(cost_US*current_discount)}
if(risk_data[6] == 1){MRI_count <- MRI_count + 1
costs <- costs + (cost_MRI*current_discount)
MRI_costs <- MRI_costs + (cost_MRI*current_discount)}
#If the next event is a screen:
if (Event_place == 1 && ca_case ==1){
#Determine if tumour is present
t <- (age+Next_event_time) - gen_age
if (t>0){
#Determine size of tumour
Ca_size <- Vm/(1+((Vm/Vc)^0.25-1)*exp(-0.25*grow_rate_i*t))^4 #tumour volume at time t
Ca_size <- 2*(Ca_size/(4/3*pi))^(1/3)
#Determine if screening detects the cancer
screen_result <- cmp_screening_result(Ca_size,VDG=risk_data[5],MRI_screening = risk_data[6],US_screening=risk_data[7])
#If a cancer is detected add a cancer and details to the counters
if(screen_result[1] == 1){
screen_detected_ca <-1
cancer_diagnostic[1] <- c((age+Time_to_screen))
cancer_diagnostic[3] <- c(Ca_size)
cancer_diagnostic[4] <- c(1)
cancer_diagnostic[5] <- c(screen_result[4])
cancer_diagnostic[6] <- c(screen_result[3])
cancer_diagnostic[10] <- c(screen_count)
incidence_age_record = age+Time_to_screen
costs = costs + (cost_follow_up*current_discount)
costs_follow_up = costs_follow_up + (cost_follow_up*current_discount)
}
if(screen_result[1] == 1 && screen_count == 1){sdfirst_cancer <-1} #ca detected in first screen
if(screen_result[1] == 1 && screen_count == length(screen_times)){sdlast_cancer <-1} #ca detected on last screen
} else{screen_detected_ca <- 0}
} else{screen_detected_ca <- 0}
#Does a false-positive occur?
if(Event_place == 1 && screen_detected_ca == 0 && dqrunif(1,0,1)<recall_rate){
recall_count <- recall_count+1
costs=costs+(cost_follow_up*current_discount)+(biopsy_rate*cost_biop*current_discount)
costs_follow_up=costs_follow_up+(costs_follow_up*current_discount)+(biopsy_rate*cost_biop*current_discount)}
}} #End screening event
#Clinical cancer diagnosis event
if(Event_place == 3){
interval_ca <-1
incidence_age_record = age+Time_to_CD
costs <- costs + (cost_follow_up*current_discount)
cancer_diagnostic[1] <- c((age+Time_to_CD))
cancer_diagnostic[3] <- c(CD_size)
}
#Cancer detected clinically or by screening
if(screen_detected_ca == 1 || interval_ca == 1){
age <- age + Next_event_time
if(interval_ca == 1){Ca_size <- CD_size}
#Assign a Stage based on tumour size
stage_cat <- cmp_stage_by_size(Ca_size)
if(stage_cat == 1){stage1_counter = stage1_counter+1}
if(stage_cat == 2){stage2_counter = stage2_counter+1}
if(stage_cat == 3){stage3_counter = stage3_counter+1}
if(stage_cat == 4){stage4_counter = stage4_counter+1}
if(stage_cat == 5){DCIS_counter = DCIS_counter+1
costs = costs + (cost_DCIS*current_discount)}
#Generate a cancer specific survival time, accounting for competing risks
Ca_mort_age <- cmp_ca_survival_time(stage_cat,Mort_age,age,CD_age)
if(Ca_mort_age<Mort_age){Mort_age<-Ca_mort_age}
if(stage_cat<3){iStage<-"Early"} else {iStage<-"Late"}
if(age<65){iAge<-"18.64"} else {iAge<-"65plus"}
if(stage_cat <5){costs<-costs+((1+risk_data[32])*as.numeric(fnLookupBase(iStage,iAge,min(c(round(Mort_age-age),50)))*current_discount))}
cancer_diagnostic[9] <- c(Mort_age)
cancer_diagnostic[2] <- c(stage_cat)
}else{age <- age + Next_event_time #update age if no cancer
}
#update times for next event
if(screen_count+missed_screen < length(screen_times)){Time_to_screen <- screen_times[screen_count+1] - age}else{Time_to_screen <- 101} #when screen times runs out set time to age 101
Time_to_death <- Mort_age - age
Time_to_CD <- CD_age - age
} #while1 end
if((screen_detected_ca+interval_ca) == 0){cancer_diagnostic[1] <- Mort_age} # recorded age is age of death or cancer incidence
#all ca/screen counters
screen_detected_count <- screen_detected_count + screen_detected_ca
screen_counter <- screen_counter + screen_count
US_counter <- US_counter + US_count
MRI_counter <- MRI_counter + MRI_count
#FP recalls
recall_counter <- recall_counter + recall_count
#first screen detected ca counter
sdfirst_counter <- sdfirst_counter + sdfirst_cancer
#last ca/screen counters
sdlast_counter <- sdlast_counter + sdlast_cancer
lastscreen_counter <- lastscreen_counter + lastscreen_count
#Life-year counter
LY_counter <- LY_counter + (Mort_age-start_age)
#QALY counter
QALY_length <- ceiling(Mort_age)-(screen_startage-1)
if(QALY_length<1){QALY_length <-1}
if(QALY_length>time_horizon-screen_startage){QALY_length <-time_horizon-screen_startage}
QALY_vect <- rep(0,QALY_length)
for (y in 1:length(QALY_vect)){
QALY_vect[y] <- (utility_ages[match((ceiling(((screen_startage-1)+y)/5)*5),utility_ages[,1]),2])*(1/(1+discount_health)^y)
QALY_vect[QALY_length]<-QALY_vect[QALY_length]*(1-(ceiling(Mort_age)-Mort_age))
}
if (incidence_age_record > 0){
QALY_vect[floor(incidence_age_record)-screen_startage] <- utility_stage_cat_y1[stage_cat]*QALY_vect[floor(incidence_age_record)-screen_startage]*(1-(incidence_age_record-floor(incidence_age_record)))}
if(incidence_age_record>0 & Mort_age-incidence_age_record>1){
QALY_vect[(floor(incidence_age_record)-screen_startage)+1]<-(utility_stage_cat_y1[stage_cat]*QALY_vect[(floor(incidence_age_record)-screen_startage)+1]*(incidence_age_record-floor(incidence_age_record)))+
(utility_stage_cat_follow[stage_cat]*QALY_vect[(floor(incidence_age_record)-screen_startage)+1]*(1-(incidence_age_record-floor(incidence_age_record))))}
if(incidence_age_record > 0 && ceiling(if(Mort_age<100){Mort_age}else{100}) > incidence_age_record+2){
for (y in (incidence_age_record+2):min((incidence_age_record+8),ceiling(if(Mort_age<100){Mort_age}else{100}))){
QALY_vect[y-screen_startage] <- QALY_vect[y-screen_startage]*utility_stage_cat_follow[stage_cat]
}
}
QALY_counter <- QALY_counter + sum(QALY_vect,na.rm = TRUE)
} #end j loop
#c(LY_counter, QALY_counter, costs, screen_counter, (screen_detected_ca+interval_ca), cancer_diagnostic, c(risk_data[15:34]), screen_strategy)
c(QALY_counter, costs, screen_counter,cancer_diagnostic[8], c(risk_data[15:40]), screen_strategy)
}
results <- data.frame(results)
names(results)[1] <- 'QALY'
names(results)[2] <- 'Cost'
names(results)[3] <- 'Screens'
names(results)[4] <- "Cancer Diagnosed"
names(results)[5:30]<-c("PSA_gamma_survival_1","PSA_gamma_survival_2","PSA_gamma_survival_3",
"PSA_meta_survival_54","PSA_meta_survival_74","PSA_meta_survival_99",
"PSA_beta_1","PSA_beta_2",'PSA_VDG1_sen','PSA_VDG2_sen',
'PSA_VDG3_sen', 'PSA_VDG4_sen',"PSA_MRI_cdr","PSA_US_cdr",
"PSA_log_norm_mean","PSA_log_norm_sd","PSA_cost_strat","PSA_costvar",
"PSA_util_1to3","PSA_util_4","PSA_costscreen","PSA_cost_follow_up",
"PSA_cost_biop","PSA_cost_US","PSA_cost_MRI","mcid")
names(results)[31]<-"alternative"
#directory to save inum/10 sets of case histories and name of files
save(results,file = paste("PSA/PSA_",screen_strategy,"_",ii,".Rdata",sep = ""))
print(paste(ii*10,"%"))
} #End 1 million simulation loop
#results #see result if parellel version
#save results
#see results
merged_result <- matrix(0,nrow = chunks,ncol = 5)
for (i in 1:chunks){
#name of saved files needed
load(paste("PSA/PSA_",screen_strategy,"_",i,".Rdata",sep = ""))
results<-results %>% filter(results[,4]>50 | results[,4]==0)
merged_result[i,1] <- mean(results[,2])
merged_result[i,2] <- mean(results[,3])
merged_result[i,3] <- mean(results[,4])
merged_result[i,4] <- mean(results[,5])
merged_result[i,5] <- mean(results[,9])
}
write.csv(merged_result,file = "PSAresults.csv")
toc()
library("parallel")
library("mgcv")
library("tidyverse")
screen_strategies<-c(0,1,2,3,4,9)
screen_strategy<-0
load(paste("PSA/PSA_",screen_strategy,"_",1,".Rdata",sep = ""))
results<-results %>% filter(results[,4]>50 | results[,4]==0)
results<-results[-c(3:4)]
psaresults<-results
for (i in 2:10){
#name of saved files needed
load(paste("PSA/PSA_",screen_strategy,"_",i,".Rdata",sep = ""))
results<-results %>% filter(results[,4]>50 | results[,4]==0)
results<-results[-c(3:4)]
psaresults<-rbind(psaresults,results)
}
for (j in 2:6){
screen_strategy<-screen_strategies[j]
for (i in 1:10){
#name of saved files needed
load(paste("PSA/PSA_",screen_strategy,"_",i,".Rdata",sep = ""))
results<-results %>% filter(results[,4]>50 | results[,4]==0)
results<-results[-c(3:4)]
psaresults<-rbind(psaresults,results)
}
}
psaresults[,29][psaresults[,29]==0]<-"noscreening"
psaresults[,29][psaresults[,29]==1]<-"procas"
psaresults[,29][psaresults[,29]==2]<-"tertiles"
psaresults[,29][psaresults[,29]==3]<-"3yr"
psaresults[,29][psaresults[,29]==4]<-"2yr"
psaresults[,29][psaresults[,29]==9]<-"fullstrat"
psaresults[,29]<-as.factor(psaresults[,29])
save(psaresults,file = paste("PSA/PSA_","psaresults",".Rdata",sep = ""))
psaresults<-psaresults[-c(15,16)]
modQ <- bam(data = psaresults,
formula = QALY ~
s(PSA_util_1to3, by = alternative, bs = "cr") +
s(PSA_util_4, by = alternative, bs = "cr") +
s(PSA_gamma_survival_1, by = alternative, bs = "cr") +
s(PSA_gamma_survival_2, by = alternative, bs = "cr") +
s(PSA_gamma_survival_3, by = alternative, bs = "cr") +
s(PSA_meta_survival_54, by = alternative, bs = "cr") +
s(PSA_meta_survival_74, by = alternative, bs = "cr") +
s(PSA_meta_survival_99, by = alternative, bs = "cr") +
s(PSA_beta_1, by = alternative, bs = "cr") +
s(PSA_beta_2, by = alternative, bs = "cr") +
s(PSA_VDG1_sen, by = alternative, bs = "cr") +
s(PSA_VDG2_sen, by = alternative, bs = "cr") +
s(PSA_VDG3_sen, by = alternative, bs = "cr") +
s(PSA_VDG4_sen, by = alternative, bs = "cr") +
s(PSA_log_norm_mean, by = alternative, bs = "cr") +
s(PSA_log_norm_sd, by = alternative, bs = "cr") +
alternative)
summary(modQ)
modQ[2:43]<-NULL
saveRDS(modQ,file="QALYmodelslim2.RDS")
modC <- bam(data = psaresults,
formula = Cost ~
s(PSA_cost_strat, by = alternative, bs = "cr") +
s(PSA_costvar, by = alternative, bs = "cr") +
s(PSA_gamma_survival_1, by = alternative, bs = "cr") +
s(PSA_gamma_survival_2, by = alternative, bs = "cr") +
s(PSA_gamma_survival_3, by = alternative, bs = "cr") +
s(PSA_meta_survival_54, by = alternative, bs = "cr") +
s(PSA_meta_survival_74, by = alternative, bs = "cr") +
s(PSA_meta_survival_99, by = alternative, bs = "cr") +
s(PSA_beta_1, by = alternative, bs = "cr") +
s(PSA_beta_2, by = alternative, bs = "cr") +
s(PSA_VDG1_sen, by = alternative, bs = "cr") +
s(PSA_VDG2_sen, by = alternative, bs = "cr") +
s(PSA_VDG3_sen, by = alternative, bs = "cr") +
s(PSA_VDG4_sen, by = alternative, bs = "cr") +
s(PSA_log_norm_mean, by = alternative, bs = "cr") +
s(PSA_log_norm_sd, by = alternative, bs = "cr") +
s(PSA_cost_follow_up, by = alternative, bs = "cr") +
s(PSA_cost_biop, by = alternative, bs = "cr") +
s(PSA_costscreen, by = alternative, bs = "cr") +
alternative)
summary(modC)
modC[2:43]<-NULL
saveRDS(modC,file="costmodel.RDS")
modQ<-readRDS("QALYmodelslim2.RDS")
modC<-readRDS("Costmodel.RDS")
#Input some values, these would be the values that decision makers can change
#For some we'd change it to a more logical value and then convert it to the data we need
#For example instead of gamma survival we'd have an input for 5 year cancer survival which we'd then convert in the R code
input_vector<-c("PSA_gamma_survival_1"= -5.462,
"PSA_gamma_survival_2"= -3.814,
"PSA_gamma_survival_3"= -2.723,
"PSA_meta_survival_54"= -1.787,
"PSA_meta_survival_74"= -1.388,
"PSA_meta_survival_99"= -1.011,
"PSA_beta_1"= 1.47,
"PSA_beta_2"= 6.51,
"PSA_VDG1_sen"= 0.85,
"PSA_VDG2_sen"= 0.776,
"PSA_VDG3_sen"= 0.695,
"PSA_VDG4_sen"= 0.61,
"PSA_log_norm_mean" = 1.07,
"PSA_log_norm_sd" = 1.32,
"PSA_cost_strat"= 8.12,
"PSA_costvar" = 0,
"PSA_util_1to3"= 0.82,
"PSA_util_4"= 0.75,
"PSA_costscreen" = 0.01,
"PSA_cost_follow_up" = 0.01,
"PSA_cost_biop"= 0.01,
"PSA_cost_US" = 0.01,
"PSA_cost_MRI" = 0.01
)
#Make a row for each alternative (screening strategy)
#I'm sure there's a better way to do this!
input_vector_strategies<-data.frame(matrix(nrow=6,ncol=23))
input_vector_strategies[1,]<-as.numeric(input_vector)
input_vector_strategies[2,]<-as.numeric(input_vector)
input_vector_strategies[3,]<-as.numeric(input_vector)
input_vector_strategies[4,]<-as.numeric(input_vector)
input_vector_strategies[5,]<-as.numeric(input_vector)
input_vector_strategies[6,]<-as.numeric(input_vector)
input_vector_strategies[,24]<-as.factor(c("noscreening","tertiles","2yr","3yr","procas","fullstrat"))
names(input_vector_strategies)<-c(names(input_vector),"alternative")
#Predict the QALYs for each strategy
#This is not giving sensible values at the moment so I need to fix
#Should be ok for now
predict.bam(modQ,input_vector_strategies)
predict.bam(modC,input_vector_strategies)
saveRDS(modC,file="costmodelslim.RDS")
saveRDS(modQ,file="QALYmodelslim.RDS")
input_vector<-c("PSA_gamma_survival_1"= -5.462,
"PSA_gamma_survival_2"= -3.814,
"PSA_gamma_survival_3"= -2.723,
"PSA_meta_survival_54"= -1.787,
"PSA_meta_survival_74"= -1.388,
"PSA_meta_survival_99"= -1.011,
"PSA_beta_1"= 1.47,
"PSA_beta_2"= 6.51,
"PSA_VDG1_sen"= 0.85,
"PSA_VDG2_sen"= 0.776,
"PSA_VDG3_sen"= 0.695,
"PSA_VDG4_sen"= 0.61,
"PSA_log_norm_mean" = 1.07,
"PSA_log_norm_sd" = 1.32,
"PSA_cost_strat"= 10,
"PSA_costvar" = 0,
"PSA_util_1to3"= 0.82,
"PSA_util_4"= 0.75,
"PSA_costscreen" = 0.01,
"PSA_cost_follow_up" = 0.01,
"PSA_cost_biop"= 0.01,
"PSA_cost_US" = 0.01,
"PSA_cost_MRI" = 0.01
)
#Make a row for each alternative (screening strategy)
#I'm sure there's a better way to do this!
input_vector_strategies<-data.frame(matrix(nrow=6,ncol=23))
input_vector_strategies[1,]<-as.numeric(input_vector)
input_vector_strategies[2,]<-as.numeric(input_vector)
input_vector_strategies[3,]<-as.numeric(input_vector)
input_vector_strategies[4,]<-as.numeric(input_vector)
input_vector_strategies[5,]<-as.numeric(input_vector)
input_vector_strategies[6,]<-as.numeric(input_vector)
input_vector_strategies[,24]<-as.factor(c("noscreening","tertiles","2yr","3yr","procas","fullstrat"))
names(input_vector_strategies)<-c(names(input_vector),"alternative")
#Predict the QALYs and costs for each strategy
#This is not giving sensible values at the moment so I need to fix
#Should be ok for now
predict.bam(modQ,input_vector_strategies)
predict.bam(modC,input_vector_strategies)
modQ<-readRDS("QALYmodelslim2.RDS")
modC<-readRDS("Costmodel.RDS")
#Input some values, these would be the values that decision makers can change
#For some we'd change it to a more logical value and then convert it to the data we need
#For example instead of gamma survival we'd have an input for 5 year cancer survival which we'd then convert in the R code
input_vector<-c("PSA_gamma_survival_1"= -6,
"PSA_gamma_survival_2"= -3.814,
"PSA_gamma_survival_3"= -2.723,
"PSA_meta_survival_54"= -1.787,
"PSA_meta_survival_74"= -1.388,
"PSA_meta_survival_99"= -1.011,
"PSA_beta_1"= 1.47,
"PSA_beta_2"= 6.51,
"PSA_VDG1_sen"= 0.85,
"PSA_VDG2_sen"= 0.776,
"PSA_VDG3_sen"= 0.695,
"PSA_VDG4_sen"= 0.61,
"PSA_log_norm_mean" = 1.07,
"PSA_log_norm_sd" = 1.32,
"PSA_cost_strat"= 8.12,
"PSA_costvar" = 0,
"PSA_util_1to3"= 0.82,
"PSA_util_4"= 0.75,
"PSA_costscreen" = 0.01,
"PSA_cost_follow_up" = 0.01,
"PSA_cost_biop"= 0.01,
"PSA_cost_US" = 0.01,
"PSA_cost_MRI" = 0.01
)
#Make a row for each alternative (screening strategy)
#I'm sure there's a better way to do this!
input_vector_strategies<-data.frame(matrix(nrow=6,ncol=23))
input_vector_strategies[1,]<-as.numeric(input_vector)
input_vector_strategies[2,]<-as.numeric(input_vector)
input_vector_strategies[3,]<-as.numeric(input_vector)
input_vector_strategies[4,]<-as.numeric(input_vector)
input_vector_strategies[5,]<-as.numeric(input_vector)
input_vector_strategies[6,]<-as.numeric(input_vector)
input_vector_strategies[,24]<-as.factor(c("noscreening","tertiles","2yr","3yr","procas","fullstrat"))
names(input_vector_strategies)<-c(names(input_vector),"alternative")
#Predict the QALYs and costs for each strategy
#This is not giving sensible values at the moment so I need to fix
#Should be ok for now
predict.bam(modQ,input_vector_strategies)
predict.bam(modC,input_vector_strategies)
